apply plugin: 'com.android.library'
//apply plugin: 'signing'
//apply plugin: 'com.vanniktech.maven.publish'

/* gets the version name from the latest Git tag, stripping the leading 'tor-' off */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--always'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdk 33

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        /*
          The Android Testing Support Library collects analytics to continuously improve the testing
          experience. More specifically, it uploads a hash of the package name of the application
          under test for each invocation. If you do not wish to upload this data, you can opt-out by
          passing the following argument to the test runner: disableAnalytics "true".
         */
        testInstrumentationRunnerArguments disableAnalytics: 'true'


        buildConfigField 'int', 'VERSION_CODE', "${rootProject.ext.versionCode}"
        buildConfigField 'String', 'VERSION_NAME', "\"${rootProject.ext.versionName}\""

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    packagingOptions {
        exclude 'META-INF/androidx.localbroadcastmanager_localbroadcastmanager.version'
    }

    namespace 'org.torproject.jni'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.so'])
    api 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'
    api 'info.guardianproject:jtorctl:0.4.5.7'

    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'info.guardianproject.netcipher:netcipher:2.1.0'
    androidTestImplementation 'commons-io:commons-io:2.11.0'
    androidTestImplementation 'commons-net:commons-net:3.6'
}


android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompileProvider, sourcesJar, javadocJar
    task.from variant.javaCompileProvider.get().destinationDir
    //task.exclude('info/guardianproject/**/BuildConfig.**')
    artifacts.add('archives', task);
    task.archiveBaseName = 'tor-android'
}

tasks.withType(AbstractArchiveTask) {
    dirMode = 0755
    fileMode = 0644
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
    archiveBaseName = 'tor-android-' + getVersionName()
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.noTimestamp = true
    options.addBooleanOption("Xdoclint:none", true)
    options.addStringOption('Xmaxwarns', '1')
    options.addStringOption('charset', 'UTF-8') // to match Maven's case
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
    archiveBaseName = 'tor-android-' + getVersionName()
}

apply from: 'publishLocal.gradle'
//apply from: 'publishMavenCentral.gradle'
//apply from: 'publishMavenCentralAlt.gradle'

/**
signing {
    useGpgCmd()
    sign publishing.publications
}
**/
